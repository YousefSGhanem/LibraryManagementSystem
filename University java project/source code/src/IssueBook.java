
import Project.connectionProvider;
import java.sql.*;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Moahamad Moaqaly 
 * matriculation number: 1310757
 * *************
 * @author Yousef Ghanem 
 * matriculation number: 1310760
 * *+***********
 * @author Nassim Laaraj
 * matriculation number: 1366099
 * 
 *  @author Javiel Figuereo Schade
 * matriculation number: 1324563
 */
public class IssueBook extends javax.swing.JFrame {

    /**
     * Creates new form IssueBook
     */
    public IssueBook() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        isbnLabel = new javax.swing.JLabel();
        studentIDLabel = new javax.swing.JLabel();
        issueDateLabel = new javax.swing.JLabel();
        dueDateLabel = new javax.swing.JLabel();
        isbn_Input = new javax.swing.JTextField();
        studentIDInput = new javax.swing.JTextField();
        issueDateChooser = new com.toedter.calendar.JDateChooser();
        dueDateChooser = new com.toedter.calendar.JDateChooser();
        issueBook = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        titleIssueBook = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(980, 195));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(24, 27, 52));
        jPanel1.setPreferredSize(new java.awt.Dimension(1000, 1000));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        isbnLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        isbnLabel.setForeground(new java.awt.Color(255, 255, 255));
        isbnLabel.setText("ISBN");
        jPanel1.add(isbnLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 360, 70, 30));

        studentIDLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        studentIDLabel.setForeground(new java.awt.Color(255, 255, 255));
        studentIDLabel.setText("StudentID");
        jPanel1.add(studentIDLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 410, 90, 30));

        issueDateLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        issueDateLabel.setForeground(new java.awt.Color(255, 255, 255));
        issueDateLabel.setText("Issue Date");
        jPanel1.add(issueDateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 460, 100, 30));

        dueDateLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        dueDateLabel.setForeground(new java.awt.Color(255, 255, 255));
        dueDateLabel.setText("Due Date");
        jPanel1.add(dueDateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 500, -1, 30));

        isbn_Input.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jPanel1.add(isbn_Input, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 360, 240, 30));

        studentIDInput.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jPanel1.add(studentIDInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 410, 240, 30));
        jPanel1.add(issueDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 460, 240, 30));
        jPanel1.add(dueDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 510, 240, 30));

        issueBook.setBackground(new java.awt.Color(48, 50, 78));
        issueBook.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        issueBook.setForeground(new java.awt.Color(255, 255, 255));
        issueBook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8_give_50px.png"))); // NOI18N
        issueBook.setText("Issue");
        issueBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueBookActionPerformed(evt);
            }
        });
        jPanel1.add(issueBook, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 560, 160, 50));

        jPanel3.setBackground(new java.awt.Color(48, 50, 78));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        titleIssueBook.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        titleIssueBook.setForeground(new java.awt.Color(255, 255, 255));
        titleIssueBook.setText("Issue Book");
        jPanel3.add(titleIssueBook, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, -1, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 1000, 70));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 1000));

        pack();
    }// </editor-fold>//GEN-END:initComponents
  
    private void issueBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_issueBookActionPerformed
        // issue Book
     
        
        
        SimpleDateFormat dFormat = new SimpleDateFormat("dd-MM-yyyy");
        
        String isbn = isbn_Input.getText();
        String studentID = studentIDInput.getText();
        String issueDate = dFormat.format(issueDateChooser.getDate());
        String dueDate = dFormat.format(dueDateChooser.getDate());
        //String returnBook = "No";
        
        
            if(checkISBN(isbn)) { 
                
                if(checkStudentID(studentID)) {
                    // Update database table if both Book and Student account exists
                    if(getAvailableCopies(isbn) > 0) {
                       
                        int availableCopies = getAvailableCopies(isbn);
                        //Condition if there are copies available
                        if(availableCopies > 0) {
                            if(getCopyAmount(isbn) > 0) {
                                
                                int copyAmount = getCopyAmount(isbn) ;
                                    
                                if (studentIssuedCopy(isbn,studentID,copyAmount)) {
                           
                                    JOptionPane.showMessageDialog(null,"Student has already issued this Book");
                        
                                } else {
                        
                                    setStudentIDCopies(studentID,availableCopies);
                      
                                    if(getCopyID(isbn,studentID,availableCopies) > -1) {
                                        int copyID = getCopyID(isbn,studentID,availableCopies);
                                    
                                        // update the issue table with book id
                                        if(updateBook(isbn,copyID,studentID,issueDate,dueDate)) {
                                            
                                            if(updateAvailableCopies(availableCopies,isbn)) {
                                            JOptionPane.showMessageDialog(null, "Book issue was successful, CopyID: " + copyID + " assigned to StudentID: " + studentID );
                                            
                                            }
                                        }
                     
                                   
                                    } else {
                            
                                    JOptionPane.showMessageDialog(null,"Book is not in our Library System");
                                    }
                                }
                                                                                                       
                                } else {
                            
                                    JOptionPane.showMessageDialog(null,"Book is not in our Library System");
                                }
                        }
                       
                      
                    } else {
                           JOptionPane.showMessageDialog(null,"Book is currently unavailable");
                    }
                    // hier richtig?????????????
                                   
                    // close current and open new Issue Window
                    //setVisible(false);
                    //new IssueBook().setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(null,"Incorrect StudentID");
                }
                
            } else {
                JOptionPane.showMessageDialog(null,  "Incorrect ISBN");
            } 
        
    
 
    }//GEN-LAST:event_issueBookActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IssueBook().setVisible(true);
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser dueDateChooser;
    private javax.swing.JLabel dueDateLabel;
    private javax.swing.JLabel isbnLabel;
    private javax.swing.JTextField isbn_Input;
    private javax.swing.JButton issueBook;
    private com.toedter.calendar.JDateChooser issueDateChooser;
    private javax.swing.JLabel issueDateLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField studentIDInput;
    private javax.swing.JLabel studentIDLabel;
    private javax.swing.JLabel titleIssueBook;
    // End of variables declaration//GEN-END:variables

  
    private boolean checkISBN (String isbn) { 
    // Check if ISBN(Book)is in the catalogue(book table)
        try{
        Connection con=connectionProvider.getCon();
        Statement st= con.createStatement();
        
        // Check if ISBN(Book)is in the catalogue( in book table)
        ResultSet rs = st.executeQuery("SELECT * FROM book WHERE isbn='"+isbn+"'");
        
        if(rs.next()) {
            // close connection to database
            con.close();
            return true;
        }
        
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"Connection Error");
        }  
        
        return false;
    }
  
  
    private boolean checkStudentID (String studentID) { 
    // Check if studentID(studentaccount) exists( in student table)
        try{
        Connection con=connectionProvider.getCon();
        Statement st= con.createStatement();
        ResultSet rs = st.executeQuery("SELECT * FROM student WHERE studentID = '"+studentID+"'");
        
        if(rs.next()) {
            // close connection to database
            con.close();
            return true;
        }
        
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null," checkStudentID Connection Error");
        }  
        
        return false;
    }
     
     
    private int getAvailableCopies (String isbn) { 
    // Retrieve amount of current available book copies of database( from book table)
        int availableCopies = -1;
        try{
        Connection con=connectionProvider.getCon();
        Statement st= con.createStatement();
        ResultSet rs = st.executeQuery("SELECT availableCopies FROM book WHERE isbn = '"+isbn+"'");
        
        if(rs.next()) {
            availableCopies = rs.getInt(1);
            // close connection to database
            con.close();
            return availableCopies;
        }
        
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"getAvailableCopies Connection Error");
        }  
        
        return availableCopies;
    }
    
    private int getCopyAmount (String isbn) { 
    // get copy amount from book table
        int copyAmount = 0;
        try{
        Connection con=connectionProvider.getCon();
        Statement st= con.createStatement();
        ResultSet rs = st.executeQuery("SELECT copyAmount FROM book WHERE isbn = '"+isbn+"'");
        
        if(rs.next()) {
            copyAmount = rs.getInt(1);
            
        }
        
        // close connection to database
        con.close();
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"getCopyAmount Connection Error");
        }  
        
        return copyAmount;
    }
  
      
    private boolean studentIssuedCopy (String isbn, String studentID, int copyNumber) {
    // Check if studentID(studentaccount) exists( int student table)
        
        try{
        Connection con=connectionProvider.getCon();
        Statement st= con.createStatement();
        
         while (copyNumber > 0 ){
                           
         ResultSet rs= st.executeQuery("SELECT studentID FROM lms.copies WHERE isbn = '"+isbn+"' AND copyNumber = '"+copyNumber+"'");
                     
         if (rs.next()) {
            if (rs.getInt(1) == Integer.parseInt(studentID)) {
                // close connection to database
                con.close();
                return true;
            }
         }
         copyNumber--;
        }
        
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"studentIssuedCopy Connection Error");
        }  
        return false;
        
    }
    
    private boolean setStudentIDCopies (String studentID, int copyNumber) { 
    // store studentID into the copies table to belonging copy ID & copy Number
        
        try{
        Connection con=connectionProvider.getCon();
        Statement st= con.createStatement();
        
        st.executeLargeUpdate("UPDATE copies SET studentID = '"+studentID+"' WHERE copyNumber = '"+copyNumber+"'");
         
        // close connection to database
        con.close();
        return true;
        
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null," setStudentIDCopies Connection Error");
        }  
        return false;
    }
    

     
    private int getCopyID (String isbn, String studentID, int availableCopies) { 
    // gets copyID from copies table
      int copyID = 0;
      try{
        Connection con=connectionProvider.getCon();
        Statement st= con.createStatement();
        ResultSet rs = st.executeQuery("SELECT copyID FROM copies WHERE isbn = '"+isbn+"' "
                + "AND studentID = '"+studentID+"' AND copyNumber = '"+availableCopies+"'");
        
        if(rs.next()) {
            copyID = rs.getInt(1);
            
            // close connection to database
            con.close();
            return copyID;
        }
        
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"Connection Error");
        }  
        
        return copyID;
    }
    
    
    private boolean updateBook(String isbn, int copyID, String studentID, String issueDate, String dueDate) {
    //storing the issue data into the issue table
        
        String returnBook = "No";
        try{
        Connection con=connectionProvider.getCon();
        Statement st= con.createStatement();
        
        st.executeUpdate("INSERT INTO issue1(isbn,copyID,studentID,issueDate,dueDate,returnBook)"
                + " VALUES('"+isbn+"','"+copyID+"' ,'"+studentID+"',"
                                            + "'"+issueDate+"','"+dueDate+"','"+returnBook+"')");
        // close connection to database
        
        return true;
        
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"updateBook Connection Error");
        }  
        return false;
       
    }
       
       
    private boolean updateAvailableCopies(int availableCopies, String isbn) { 
    //updating book table that 1 copy less is available
        
        try{
        Connection con=connectionProvider.getCon();
        Statement st= con.createStatement();
        
        availableCopies-=1;
        st.executeUpdate("UPDATE book SET availableCopies = '"+availableCopies+"' WHERE isbn = '"+isbn+"'");
        
        // close connection to database
        con.close();
        return true;
        
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"updateAvailableCopies Connection Error");
        }  
        return false;
       
    }
    

    JPanel getJPanel2() {
        return jPanel1;
    }
    
    
}
